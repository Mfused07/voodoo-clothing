'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _map = require('ramda/src/map');

var _map2 = _interopRequireDefault(_map);

var _values = require('ramda/src/values');

var _values2 = _interopRequireDefault(_values);

var _merge = require('ramda/src/merge');

var _merge2 = _interopRequireDefault(_merge);

var _range = require('ramda/src/range');

var _range2 = _interopRequireDefault(_range);

var _pick = require('ramda/src/pick');

var _pick2 = _interopRequireDefault(_pick);

var _handleQueries = require('../utils/handle-queries');

var _handleQueries2 = _interopRequireDefault(_handleQueries);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var firebaseConnect = function firebaseConnect(mapDbToProps) {
  return function (WrappedComponent) {
    var FirebaseConnect = function (_Component) {
      _inherits(FirebaseConnect, _Component);

      function FirebaseConnect(props, context) {
        _classCallCheck(this, FirebaseConnect);

        var _this = _possibleConstructorReturn(this, (FirebaseConnect.__proto__ || Object.getPrototypeOf(FirebaseConnect)).call(this, props));

        _this._getInitialRawData = function (queries) {
          return (0, _map2.default)(function (query) {
            var numQueries = void 0;
            // single query
            if (typeof query.once === 'function') {
              numQueries = 1;
            }
            // query list
            if (Array.isArray(query)) {
              numQueries = query.length;
            }
            // query options object
            if (Array.isArray(query.queries)) {
              numQueries = query.queries.length;
            }
            // this rawData will have numQueries # of results; prepare array
            return {
              options: (0, _pick2.default)(['once', 'asMap'], query),
              data: (0, _range2.default)(0, numQueries).map(function (rd) {
                return {
                  val: undefined,
                  meta: { ready: false }
                };
              })
            };
          }, queries);
        };

        _this._allRawDataReady = function () {
          var ready = true;
          (0, _map2.default)(function (rawDataItem) {
            if (!rawDataItem.data.every(function (rdi) {
              return rdi.meta.ready;
            })) ready = false;
          }, _this.rawData);
          return ready;
        };

        _this._setupSubscriptions = function (queries) {
          (0, _handleQueries2.default)(queries, {
            single: function single(query, propName) {
              query.on('value', function (snapshot) {
                // set rawData
                _this.rawData[propName].data[0] = {
                  val: snapshot.val(),
                  meta: { ready: true }
                };

                // set state if all are ready
                _this._setStateDataIfReady();
              });
            },

            list: function list(queryList, propName) {
              queryList.forEach(function (query, i) {
                query.on('value', function (snapshot) {
                  var thisData = _this.rawData[propName].data;

                  // set rawData for this propName + query index
                  thisData[i].meta.ready = true;
                  thisData[i].val = snapshot.val();
                  // remove any extra indexes (from old queries)
                  thisData.splice(queryList.length, thisData.length - queryList.length);

                  // set state if all are ready
                  _this._setStateDataIfReady();
                });
              });
            },

            obj: function obj(queryObj, propName) {
              queryObj.queries.forEach(function (query, i) {
                var method = 'on';
                if (queryObj.once) method = 'once';
                query[method]('value', function (snapshot) {
                  var thisData = _this.rawData[propName].data;

                  // set rawData for this propName + query index
                  thisData[i].meta.ready = true;
                  thisData[i].val = snapshot.val();
                  // remove any extra indexes (from old queries)
                  thisData.splice(queryObj.queries.length, thisData.length - queryObj.queries.length);

                  // set state if all are ready
                  _this._setStateDataIfReady();
                });
              });
            }
          });

          _this.setState({ subscriptionsAreSetup: true });
        };

        _this._setStateDataIfReady = function () {
          if (_this._allRawDataReady()) {
            _this.setState(function (prevState) {
              return {
                data: (0, _map2.default)(function (dataSet) {
                  var newData = dataSet.options.asMap ? dataSet.data.reduce(function (a, d) {
                    return (0, _merge2.default)(a, d.val);
                  }, {}) : dataSet.data.length === 1 ? dataSet.data[0].val : dataSet.data.reduce(function (a, d) {
                    return a.concat((0, _values2.default)(d.val));
                  }, []);

                  return newData;
                }, _this.rawData)
              };
            });
          }
        };

        _this._cancelSubscriptions = function (queries) {
          var resetRawData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

          (0, _handleQueries2.default)(queries, {
            single: function single(query, propName) {
              query.off();
            },

            list: function list(queryList, propName) {
              queryList.forEach(function (query) {
                query.off();
              });
            },

            obj: function obj(queryObj, propName) {
              queryObj.queries.forEach(function (query) {
                query.off();
              });
            }
          });

          if (resetRawData) _this.rawData = _this._getInitialRawData(queries);
          _this.setState({ subscriptionsAreSetup: false });
        };

        _this.cancelAllSubscriptions = function () {
          if (_this.state.subscriptionsAreSetup) {
            _this._cancelSubscriptions(_this.queries);
          }
        };

        if (!context || !context.firebase) {
          throw new Error('firebaseConnect must have FirebaseProvider as an ancestor');
        }

        _this.state = {
          data: {},
          subscriptionsAreSetup: false
        };

        if (mapDbToProps) {
          _this.queries = mapDbToProps(context.firebase.database(), props);
          _this.rawData = _this._getInitialRawData(_this.queries);
        }
        return _this;
      }

      _createClass(FirebaseConnect, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (mapDbToProps) {
            this._setupSubscriptions(this.queries);
          }
        }
      }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
          // if props are different, cancel and reset all query subscriptions
          if (mapDbToProps && this.props !== nextProps) {
            this._cancelSubscriptions(this.queries);
            this.queries = mapDbToProps(this.context.firebase.database(), nextProps);
            this.rawData = this._getInitialRawData(this.queries);
            this._setupSubscriptions(this.queries);
          }
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this._cancelSubscriptions(this.queries);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(WrappedComponent, _extends({
            firebase: this.context.firebase,
            cancelAllSubscriptions: this.cancelAllSubscriptions
          }, this.state.data, this.props));
        }
      }]);

      return FirebaseConnect;
    }(_react.Component);

    FirebaseConnect.contextTypes = { firebase: _propTypes2.default.object };
    FirebaseConnect.displayName = 'FirebaseConnect';


    return FirebaseConnect;
  };
};

exports.default = firebaseConnect;